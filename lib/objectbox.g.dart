// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;

import 'data/models/dayStatsModel.dart';
import 'data/models/objectboxModels/wallpaperModel.dart';
import 'data/models/pomodoroShemeModel.dart';
import 'data/models/soundControllerStateModel.dart';
import 'data/models/soundSettingsModel.dart';
import 'data/models/timerStateModel.dart';
import 'data/models/userAppSettingsModel.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 6562619673579655553),
      name: 'SoundSettingsEntity',
      lastPropertyId: const obx_int.IdUid(8, 7838433798156663337),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3890026312574920748),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1203687146279497536),
            name: 'volumeLevel',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3397054278232152853),
            name: 'soundBeforeWork',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7356873300078318772),
            name: 'soundBeforeWorkName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5821446597840269889),
            name: 'soundBeforeShortBreak',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2697248951810028380),
            name: 'soundBeforeShortBreakName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2803758125441789046),
            name: 'soundBeforeLongBreak',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7838433798156663337),
            name: 'soundBeforeLongBreakName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(12, 8536180317472711736),
      name: 'UserAppSettingsEntity',
      lastPropertyId: const obx_int.IdUid(11, 6124615899739704829),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8146609007284437210),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2841487075169055503),
            name: 'appTheme',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 9153250920839816979),
            name: 'appLanguage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 9135585324471046735),
            name: 'appVersion',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3638142115670474344),
            name: 'selectedVideoWallpapersUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4726326943460745470),
            name: 'notifyOneMinuteBeforeEnd',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7547930682678690481),
            name: 'playSound',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4396439288516820870),
            name: 'animatedWallpapers',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6471482047542614105),
            name: 'timeFormat24',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 5797623641557921),
            name: 'needGuide',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 6124615899739704829),
            name: 'uploadedWallpapers',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(13, 5624600751562589462),
      name: 'PomodoroShemeEntity',
      lastPropertyId: const obx_int.IdUid(6, 8988132856889622482),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6384593190442255517),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2109227129328074254),
            name: 'shemeName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8303082722923654699),
            name: 'breakTimeInSeconds',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6276955632830620493),
            name: 'shortBreakTimeInSeconds',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3267669467446316718),
            name: 'workSessionTimeInSeconds',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8988132856889622482),
            name: 'numberOfSessionsBeforeLongBreak',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(16, 4686704414085991676),
      name: 'DayStatsEntity',
      lastPropertyId: const obx_int.IdUid(8, 2947535202501131032),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5432102756819601388),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5334730773396894188),
            name: 'statsDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 18794454014303726),
            name: 'maximumWorkTimeDuringThisInterval',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8223334791746303150),
            name: 'totalWorkTimeForTheEntireInterval',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2947535202501131032),
            name: 'shemeName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(18, 833376827929387671),
      name: 'TimerStateEntity',
      lastPropertyId: const obx_int.IdUid(6, 7360230315895562265),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2239786448709289121),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 23308672587163670),
            name: 'currentState',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6444998337164201242),
            name: 'remainingTimeInSeconds',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 524681937136743862),
            name: 'selectedShemeName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 9055010910756377274),
            name: 'breakStepAutomatically',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7360230315895562265),
            name: 'workStepAutomatically',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(21, 4496322311483189109),
      name: 'SoundControllerStateEntity',
      lastPropertyId: const obx_int.IdUid(6, 4952188447240763091),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 752996874567859083),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4029984576537501316),
            name: 'breakSound',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1079757223348242022),
            name: 'workSound',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 500328124447125158),
            name: 'playWorkSound',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2781614076679479653),
            name: 'playBreakSound',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4952188447240763091),
            name: 'soundsVolume',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(22, 8497469601270015743),
      name: 'WallPaperEntity',
      lastPropertyId: const obx_int.IdUid(3, 918531116838476904),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2122176292149435144),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1540433464300837510),
            name: 'fullpathToFile',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 918531116838476904),
            name: 'urlToDownload',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
obx.Store openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) {
  return obx.Store(getObjectBoxModel(),
      directory: directory,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(22, 8497469601270015743),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [
        7554148539432920652,
        3454221986393760899,
        7978852640348343410,
        6962562875069537778,
        943705625377452512,
        3850387407009381215,
        5151420448803525941,
        174827283555167833,
        5612701437216031141,
        5765152530875736903,
        5748257491801340461,
        2012777302821686696,
        6652895435483020678,
        1937710206179895774,
        291801131246954457
      ],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        2444910038900581958,
        6021072831149076989,
        4868916848065023530,
        6903354940759120768,
        7803758299677704036,
        1390090899655933311,
        2784744432672154311,
        9057185395491525224,
        4406637688488080107,
        6944224423558944880,
        6762545342510353129,
        8766264505616011270,
        8948868189797617647,
        6162575786209892059,
        2759820047356514828,
        3800348931574624039,
        3897382446793166483,
        7797311531726497671,
        9082281206242576684,
        1619642478313767210,
        8573831743979138678,
        4118040172104210935,
        3337658394510373079,
        7033052386641741182,
        7760325663808163692,
        1576965680597956925,
        7391820759567682131,
        3305093348347225288,
        7030445584181966570,
        33675577782604452,
        6127807838285987587,
        7921915852844587405,
        1385566787755115537,
        8161947099995521292,
        1902878571054824936,
        2228796626889114247,
        3787202722564545469,
        1619736007600827533,
        3800756421577446318,
        611593499005510393,
        2881460978075767034,
        2705856910308585714,
        8345886704288781843,
        2290706716802231011,
        8372205727965307044,
        3913107912244354721,
        1015990293410680153,
        2351778305851150615,
        8848268005700813854,
        826258922339201355,
        8832524458772245361,
        3367179541049640739,
        426185984384319726,
        8047124041877946134,
        5203963765977948957,
        1740219833177678683,
        8106421874798510351,
        1561184430050643749,
        2337802129109847872,
        2294700134657984398,
        5328298629174827442,
        8686768893780466784,
        5577992867702555388,
        7587415029870013535,
        5142948445064181913,
        834185297099147301,
        1648119373935881389,
        7091435537670068860,
        6314842139037973874,
        9186990942735873174,
        8731213351084690780,
        6239916253920319147,
        916846725079010506,
        8331743092016727837,
        967347719020221682,
        117546605085944442,
        643463093036383549,
        409758173835390685,
        3036337484822214752,
        7031836509928181267,
        5881178578887345152,
        4368763200771875681,
        7183184178008448411,
        1540731033263441718,
        6009339178457315997,
        1614581502164568960,
        8608889999877365580,
        4379935881332760126,
        8062735079153330854,
        618892197843284112,
        3118623825673625971,
        1553555720652725813,
        553612520984412607,
        7834614007142858840,
        641270878687342946,
        7064002692016723883,
        4220626310172283621,
        2533274084643375384,
        9094620350770789117,
        192857855337447716,
        1216756181628133520,
        7610351880064766632,
        636355722917722252,
        4708783066466691219,
        5594603112834019366,
        2637624774214415727,
        5225821801809444957,
        7616047402146602749,
        5474220232562684037,
        7712161376570790361,
        6963185217427842297,
        4275402785281133800,
        6871193644404871875,
        3724065939750466625,
        6592199726789003297,
        2634558882966218099,
        8787369728281655356,
        2155923260320524060,
        1687682619209700656,
        2939224029442376135,
        5442068615410294932,
        1953597343168958587,
        6402427065319607760,
        2233542482399897087,
        4499534436037570666,
        3935779314594072100,
        5907324779119614894,
        8846185480258399015,
        8200945018297529076,
        2773366193348265445,
        5987971621886334689,
        4583020992838513119,
        7563928283053922495,
        3510738090785380242,
        7620285577059153292,
        1162795113553521048,
        6372165516019074789,
        5113206588772582690,
        1586700407991931586,
        8938884746168074701,
        3276036161582527975,
        1123774791274488615,
        8128424296412701981,
        5706634850051113213,
        5133578306941006120,
        3355868562525558192,
        5945790526805197754,
        7276709791408358411,
        558145551767032258,
        8979162913329137280,
        2507131566434706618,
        7219212715104153089,
        6321850399351312400,
        880525665617547544,
        5445179351545793958,
        5628490556600984705,
        8707623850343753875,
        5344160380384358751,
        5152601708914212711,
        279758199161757310,
        5741022673473312797,
        7798330108979393272,
        6573377137718254431,
        7203318270927631752,
        3973578679330862720,
        1836661714301080091,
        8145203400440294789,
        4878420412787055568,
        568925882881175887,
        1534930455170851175,
        6884504304730800620,
        1669412182917936985,
        1905949824950435882,
        6243573802144615990,
        1885682078064783119,
        298871410511334044,
        7059515637259834541,
        8335918973024667954,
        7064579578018852734,
        8232985568073556293,
        6787857750730547176,
        4450112721644385976,
        2593827413853761434,
        4007518430447937833,
        5251360840269958069,
        8712345829549472322,
        8080549826149580389,
        6007070410940165099,
        933201666591129670,
        81150368709317547,
        8032588063315223580,
        2597205252759718087,
        2842344597612178151,
        4641953129691228672,
        6510584756884823218,
        6978679896052044558,
        8944998891994116097,
        8784172460894989302,
        4178521256807260945,
        4343883593780786762,
        6990387319162742425,
        8549206609932338679,
        4808951449550469388,
        965779032400952035,
        7591420794277398200,
        7789832093637706183,
        5141834190760023675,
        4346261582569374157,
        8243639852599764812,
        2927087154836259478,
        554251990231367027,
        2590237558503800768,
        3154878915459840891,
        4391171212567316970,
        2467704293792036788,
        3624657777725034415,
        5980700061248608108,
        5628776232274285933,
        877618863678606698,
        3993174868876166763,
        1115193885965213050,
        8156410097398294890,
        6055698743755045875,
        4044858839954835034,
        7641167262120148632,
        6171600868028999495,
        6852759728149071531,
        1103448335204703396,
        2671428303969187183,
        1730457699027475280,
        6513430203403031345,
        938498886830050128,
        3163421859403328174,
        1051120581324577187,
        4187035599724164784,
        6690992207047475430,
        6824716867894199195,
        3476897538945345141,
        964476638111418280,
        2436723942581744832,
        37929229813076331,
        7095254248301311566,
        7631068576808214744,
        710525802899806626,
        8840700927410638881,
        1545821262303909129,
        8635937407541804887,
        8237260878499992151,
        5386267841411544934,
        2296039271654670438,
        6112074595350813019,
        4378336693496102355,
        450175053302217498,
        5386257756786712935,
        3849243128814578867,
        8705096185984324318,
        6616764079468362789,
        4938535685037856019,
        8102316992552882893,
        857857468506667200,
        1071895858508260141,
        6937380890166496322,
        1748955790034966338,
        1782581168814923422,
        715428817862561693,
        3657328229914446124,
        7102632980687271244,
        6498536253974596485,
        5312027553491751751,
        8589023433424027809,
        8697917010869667393,
        8840643686213483268,
        2862266956157507958,
        7902766839459001546,
        7325174490419260918,
        795278447315031282,
        1293403234468865699,
        2416196140292230049,
        5986491240400876770,
        7093082284565669131,
        6376559886673503241,
        3835962405690499551,
        4640151865095055714,
        5580746125581283906,
        3883188798229566708,
        2760980260165118848,
        3033496436864519679,
        2550714885168626950,
        3598189156643461910,
        5081803629036271474,
        4764087011474068412,
        7489658234053489964,
        6439951982637026069,
        8934225560827383649,
        6873476660132195916,
        1534532509652763411,
        8564837188211192908,
        6777937424841487673,
        961713657975196830,
        7144858545432931365,
        3979287542555079281,
        3960546469450893804,
        8233630345573984154,
        4362966388480421670,
        7760573525129330549,
        2422970391275959131,
        9204288219758919306,
        1337206935713928864,
        1305691451665002443,
        8358771593205522574,
        574973671712044140,
        872376859555115133,
        3849672644017627230,
        2640255750051393401,
        5909748879250092157,
        1554772535685282549,
        423165112283954867,
        4604083123063739655,
        7245602583298076095,
        7987541540407276387,
        7770491577829894628,
        8259956516238080178,
        226669110954990366,
        1715551882779856335,
        57291201117929123,
        7133445439059424702,
        4521044872543869411,
        3513671709238149738,
        7594504592781919138,
        6519822535194557553,
        7232246952374385257,
        2716278395316105653,
        3723680309837814168,
        3234018588232782026,
        1668272833557734019,
        5983278455034117298,
        8087572829204506901,
        2062050191117775422,
        4825054366409430971,
        5338006175400258119,
        6784606710843129800,
        7778905696110903424,
        4858866836061425199,
        1402254030497545805,
        2069753704180315935,
        8344435011429606153,
        5037352781381916817,
        3126980320516109765,
        5754801728156760122,
        8363174867504001865,
        1394305748919266972,
        2691166532901494639,
        6913299224613264161,
        1144603574078656166,
        8664662224422551048,
        4180310812226309377,
        4314274330862190388,
        2104904685448212257,
        9107858155107510888,
        2241497194299515694,
        2863928787765728060,
        4993880254397389953,
        3988329940430720171,
        3332186722432254259,
        5924247035195749271,
        601606438162817059,
        3969494892523396970,
        7585901360472862864,
        884875884093675991,
        29665389827689313,
        5064945853385280458,
        2031520578905142714,
        7406221627453831339,
        6509836089630998986,
        4326085197296323998,
        4900274353690944982,
        4325400587009305451,
        6003059645500367923,
        7594382466160803944,
        122968073055086946,
        6517668246098123892,
        6192988845404983473,
        8070371096548570936,
        1440596760150123479,
        2500715015678397765,
        8170334265942329122,
        1089962149305263308,
        1183720134304291829,
        2021105724253803943,
        1670209896297953505,
        5606531007628703751,
        2398981370779448677,
        7001938855342181020,
        606763351343223426,
        6779748287014449359,
        7159781833134542964,
        3091584325679844595,
        1448698194761190982,
        7708842535131242723,
        4418400116237349013,
        3351600769872598442,
        5108917436238661872,
        5155773696274896903,
        3722406758570185032,
        5825576516243563718,
        7603568023846445537,
        2183156734629439112,
        8660682287726571625,
        5075461673341644861,
        5125519744471993241,
        504609790969473995,
        9201001456531295087,
        5261066310033645331,
        1816888608425131701,
        2925906715771814827,
        2175653243630178925,
        996403752008430940,
        3641792064727964229,
        1283383327584667394,
        8641086534884260916,
        1815760582271484103,
        9051267155628999313,
        8261583993995488130,
        2378773957147504505,
        4556750539896080813,
        4703021091574426641,
        1236968080240816639,
        9148395468069842905,
        3383343813053257103,
        6808167381347520740,
        3669358602424333952,
        9010157631887665896,
        4171371075999823781,
        855505390044521152,
        5917420787150544026,
        9064930073438712710,
        5923928571050013723,
        6342188203261046247,
        2550803891617964085,
        7572937094313147226,
        9136855065003769014,
        3853873282032142456,
        3692121539385651840,
        7134964944488935394,
        200914698397944399,
        8412089082038829867,
        8409053019582187540,
        791759454647804964,
        1481151785760472865,
        8008924339165377680,
        3366254727060820457,
        1411862712128130488,
        3984751932387925117,
        3188639441815298172,
        5778897075849873087,
        2900366629269071097,
        5060621264867454647,
        3671557266426709514,
        1761880378562064440,
        2582624523344375460,
        559525089438876754,
        1280351390446382264,
        6366084312033738682,
        6220033313373277781,
        6244477767023074802,
        3115803406366161690,
        3065597122946427608,
        4861587827730456019,
        7554075118912468818,
        7614743413551054554,
        4507301838439672475,
        7741290662419574835,
        5209449084013108421,
        4766184993746598119,
        8843000779759518927,
        3889784808799775458,
        2329814963252479576,
        5776861326370901661,
        2378838839594915013,
        6962473369921098491,
        941063389737351929,
        1325572834207114363,
        5651340017813183302,
        3400311525674928926,
        3360649433910375439,
        7398922528387269612,
        4552540120492697353,
        718588667126749995,
        6439086247824423525,
        6778618679696995097,
        6304733153965671327,
        1812189029349844695,
        1383731096038028363,
        6708225767262988182,
        5876702964191429209,
        8735920461703402695,
        361045466029192689,
        2877019698894603620,
        2653610784944020940,
        2107230472467979714,
        5746228816245212498,
        5001364139550652007,
        6600951243202255418,
        4501367964687223028,
        3298493481403416871,
        7031676655065741607,
        6867289452496034440,
        4639238412369871271,
        1002085912558817417,
        8863508196605023553,
        3335273417849279620,
        4646286787452771721,
        6293625369893480140,
        7667177663539119320,
        2439389051087834468,
        4298673094716967426,
        4769365422583352350,
        2359410746925702111,
        2915458444409287344,
        3580033525872255536,
        8676891700349892858,
        4904837926858024163,
        349970570441200502,
        7823970284314997422,
        8930745686577537809,
        1974772389317187673,
        8851632155896054958,
        6308173362353308888,
        7834402681010368864,
        2647268467886801296,
        7647935271229176670,
        1662538349323334862,
        5630156777099893843,
        2515374860122135991,
        1753921430713597344,
        610737995858796173,
        4378856796600170154,
        1177317209563931850,
        3357061690915464463,
        4236339045324115515,
        8835154935166426770,
        7805105114487236284,
        8965049891425032778,
        5221071057487837394,
        7828343057480855013,
        9040268632917727703,
        4474947437592702974,
        2457718635947219049,
        2008113758000566760,
        1323915492666543127,
        6941165565729757638,
        7522678557721455935,
        2248379338486923342,
        2901851331347649779,
        4744143772145978486,
        5134505872082779985,
        2518901836552066193,
        7382066202076128433,
        3338101570096866752,
        508457636212953005,
        6033376390890778294,
        8646037350736915305,
        7788817746278554518,
        723095668202441069,
        5127121429583539654,
        8863761220986730250,
        1079843790791143547,
        3608095860511581169,
        2677479324128908435,
        1587113688567588030,
        4418759241185640895,
        6428796127625899958,
        1157068889088053093,
        1838387985595522885,
        2405725309597557099,
        6560853511080598781,
        8865486049066043909,
        200115650146843612,
        8837058887310388612,
        7020034991447071986,
        6041366529833348167,
        4506180780217140329,
        2771552335257076440,
        6370253234988638072,
        1723411554383614389,
        3729216983315183880,
        8434557059935075651,
        5977529321667734381,
        1773801866976342941,
        2115523381041834822,
        1433383646555682254,
        3937577265533402819,
        2539769474002216063,
        2413170039962385799,
        4181604464315737913,
        7612193455998261903,
        3862502215637837979,
        509939636479934052,
        7807376936623731267,
        936979607850917941,
        5836779063651718440,
        8277580871088693032,
        6929337755215679270,
        3582006749204678052,
        3268953713751426146,
        7849362776147463438,
        5114201015735455015,
        7328676847029043807,
        1455649624158411719,
        4769969518670829222,
        3013181388868519545,
        5329439241292454925,
        6526893209276920153,
        4546997915019976018,
        3492996826682144061,
        6027376298577389274,
        2354752489270020867,
        452307474195529458,
        5461194528529291834,
        3281776729856102202,
        1984135419381942698,
        4909894864562944062,
        3634075968264758884,
        8395475962000884669,
        6574870403560417300,
        7573514650344697243,
        2518746278366727776,
        4453552404786759660,
        302804679594211963,
        5847243900718462369,
        5902371170459138056,
        6748630134350022589,
        4649938914909894674,
        8812507534460736514,
        573537563448149313,
        4816804325117556164,
        4430965848523044109,
        9094646030385689200,
        4186419087627557552,
        560682659606000951,
        5442391326327843564,
        8734179656013962030,
        5043772070765383410,
        9152609076686298907,
        544196512193022795,
        1832295431065846909,
        8317072035715364471,
        7805671899387688219,
        7990246863518269237,
        4791915869437414740,
        3250447331877602719,
        5670566097262260959,
        4266897102335388873,
        5710804844200502205,
        4487963161312104158,
        5459422147734818352,
        5477357244682427320,
        4038502180842361469,
        1167724754781142695,
        1576577750050900776,
        1626618757554572681,
        4903071318366709291,
        8420893123231210331,
        267807320254440655,
        765293541634766168,
        8570646309429760233,
        9159638649932238509,
        5478244888969191435,
        7873676540253224861,
        3102474321538902678,
        7409744267393418974,
        1856545422316246569,
        2268224890219639252,
        2638719732627163272,
        5083874367582792733,
        6944129649230676525,
        5529391776093483364,
        3738555771915645043,
        5897936650326735903,
        6445701521531204273,
        3233288583313958684,
        4799697583556163913,
        115110285072208071,
        6537352615873423920,
        1190452717236270911,
        2865370424606685860,
        7526675878867885465,
        1166468130733791442,
        9103425750734768969,
        338474873307458901,
        4412973658040871759,
        272764165417425874,
        3052983116852566905,
        7451484429836993429,
        4206861615090156625,
        1474589356184260989,
        7438293061188457088,
        6349392552413627978,
        9176402485502777986,
        5591525642570791966,
        1729993970624565312,
        4283522675747295265,
        7548877924006126626,
        2906224591458937255,
        501887670639751324,
        2064709861314963220,
        4974914591476264754,
        8433119287885476711,
        6415880226057357976,
        1303711767522152793,
        5401931600706878307,
        4378971026348122804,
        8862448457372044312,
        8921456641574364015,
        8817755092212026793,
        4527371226031205728,
        4036262203902941599,
        162304336528874023,
        323973823606081047,
        2978108582684678012,
        7694153789203807455,
        6788896895056308704,
        5533023963465678072,
        9208695540087014986,
        7072215655277383342,
        8450953816527541903,
        1838486624816865677,
        8946140837186269232,
        2383861805116687694,
        6789836978028411133,
        7952552012604599039,
        4399034151960442374,
        356113100027024973,
        8344335593415850246,
        865024801530720860,
        7681854477802784942,
        275164245377002203,
        5514268810860557936,
        5782251146899466228,
        359521470311925347,
        7169967632232727866,
        1861238475732811888,
        2879774741795367267,
        5710684566929387183,
        8517717871645881763,
        6899009498905878626,
        631670135892088045,
        4061348932062663278,
        3468650368264468569,
        6701988750078027017,
        7761168710675007430,
        3650981029260748415,
        1235584390393173144,
        1635784752750673163,
        552321868729987204,
        4938426799519332138,
        1665312607016983126,
        1085789137719650472,
        7982019508324126352,
        1159424871238388547,
        1419113302105259958,
        5425972149600420703,
        8845210251542062699,
        7311433042316505842,
        3328721930259824658,
        8595305852643353651,
        3953044924875470991,
        3053059501042283847,
        7856396772645028099,
        6169590759656371124,
        7775219632578442657,
        6973167486787141768,
        1284266226824337335,
        3079576298082823305,
        8912274978082405537,
        5410035343793912017,
        1187429032121482972,
        9114190771209594797,
        7181651800128849677,
        5670132821610088454,
        7721838381409015619,
        2766137168407612563,
        949286402120048392,
        3177115754031800369,
        5298863823261270648,
        5966598617932148126,
        3432987367865949643,
        8642762224150370750,
        3589919166942521698,
        6279790774187218212,
        8756852407336870495,
        6407794987832621195,
        5575509586645039627,
        1953022494310185246,
        7345713900573269917,
        8781411553276131476,
        8824688959328753277,
        6874520402907252585,
        8014157323392994130,
        6691961877432648614,
        4847497936333950468,
        8069599937808702781,
        8372379996619020191,
        249490924430684651,
        7223763114162164675
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    SoundSettingsEntity: obx_int.EntityDefinition<SoundSettingsEntity>(
        model: _entities[0],
        toOneRelations: (SoundSettingsEntity object) => [],
        toManyRelations: (SoundSettingsEntity object) => {},
        getId: (SoundSettingsEntity object) => object.id,
        setId: (SoundSettingsEntity object, int id) {
          object.id = id;
        },
        objectToFB: (SoundSettingsEntity object, fb.Builder fbb) {
          final soundBeforeWorkNameOffset =
              fbb.writeString(object.soundBeforeWorkName);
          final soundBeforeShortBreakNameOffset =
              fbb.writeString(object.soundBeforeShortBreakName);
          final soundBeforeLongBreakNameOffset =
              fbb.writeString(object.soundBeforeLongBreakName);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.volumeLevel);
          fbb.addBool(2, object.soundBeforeWork);
          fbb.addOffset(3, soundBeforeWorkNameOffset);
          fbb.addBool(4, object.soundBeforeShortBreak);
          fbb.addOffset(5, soundBeforeShortBreakNameOffset);
          fbb.addBool(6, object.soundBeforeLongBreak);
          fbb.addOffset(7, soundBeforeLongBreakNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final volumeLevelParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final soundBeforeWorkParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          final soundBeforeWorkNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final soundBeforeShortBreakParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final soundBeforeShortBreakNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final soundBeforeLongBreakParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          final soundBeforeLongBreakNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final object = SoundSettingsEntity(
              id: idParam,
              volumeLevel: volumeLevelParam,
              soundBeforeWork: soundBeforeWorkParam,
              soundBeforeWorkName: soundBeforeWorkNameParam,
              soundBeforeShortBreak: soundBeforeShortBreakParam,
              soundBeforeShortBreakName: soundBeforeShortBreakNameParam,
              soundBeforeLongBreak: soundBeforeLongBreakParam,
              soundBeforeLongBreakName: soundBeforeLongBreakNameParam);

          return object;
        }),
    UserAppSettingsEntity: obx_int.EntityDefinition<UserAppSettingsEntity>(
        model: _entities[1],
        toOneRelations: (UserAppSettingsEntity object) => [],
        toManyRelations: (UserAppSettingsEntity object) => {},
        getId: (UserAppSettingsEntity object) => object.id,
        setId: (UserAppSettingsEntity object, int id) {
          object.id = id;
        },
        objectToFB: (UserAppSettingsEntity object, fb.Builder fbb) {
          final appThemeOffset = fbb.writeString(object.appTheme);
          final appLanguageOffset = fbb.writeString(object.appLanguage);
          final appVersionOffset = fbb.writeString(object.appVersion);
          final selectedVideoWallpapersUrlOffset =
              fbb.writeString(object.selectedVideoWallpapersUrl);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, appThemeOffset);
          fbb.addOffset(2, appLanguageOffset);
          fbb.addOffset(3, appVersionOffset);
          fbb.addOffset(4, selectedVideoWallpapersUrlOffset);
          fbb.addBool(5, object.notifyOneMinuteBeforeEnd);
          fbb.addBool(6, object.playSound);
          fbb.addBool(7, object.animatedWallpapers);
          fbb.addBool(8, object.timeFormat24);
          fbb.addBool(9, object.needGuide);
          fbb.addBool(10, object.uploadedWallpapers);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final appThemeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final appLanguageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final appVersionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final selectedVideoWallpapersUrlParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final notifyOneMinuteBeforeEndParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final playSoundParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          final needGuideParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false);
          final animatedWallpapersParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final uploadedWallpapersParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 24, false);
          final timeFormat24Param =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 20, false);
          final object = UserAppSettingsEntity(
              appTheme: appThemeParam,
              appLanguage: appLanguageParam,
              appVersion: appVersionParam,
              selectedVideoWallpapersUrl: selectedVideoWallpapersUrlParam,
              notifyOneMinuteBeforeEnd: notifyOneMinuteBeforeEndParam,
              playSound: playSoundParam,
              needGuide: needGuideParam,
              animatedWallpapers: animatedWallpapersParam,
              uploadedWallpapers: uploadedWallpapersParam,
              timeFormat24: timeFormat24Param)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    PomodoroShemeEntity: obx_int.EntityDefinition<PomodoroShemeEntity>(
        model: _entities[2],
        toOneRelations: (PomodoroShemeEntity object) => [],
        toManyRelations: (PomodoroShemeEntity object) => {},
        getId: (PomodoroShemeEntity object) => object.id,
        setId: (PomodoroShemeEntity object, int id) {
          object.id = id;
        },
        objectToFB: (PomodoroShemeEntity object, fb.Builder fbb) {
          final shemeNameOffset = fbb.writeString(object.shemeName);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, shemeNameOffset);
          fbb.addInt64(2, object.breakTimeInSeconds);
          fbb.addInt64(3, object.shortBreakTimeInSeconds);
          fbb.addInt64(4, object.workSessionTimeInSeconds);
          fbb.addInt64(5, object.numberOfSessionsBeforeLongBreak);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final shemeNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final breakTimeInSecondsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final shortBreakTimeInSecondsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final workSessionTimeInSecondsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final numberOfSessionsBeforeLongBreakParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final object = PomodoroShemeEntity(
              id: idParam,
              shemeName: shemeNameParam,
              breakTimeInSeconds: breakTimeInSecondsParam,
              shortBreakTimeInSeconds: shortBreakTimeInSecondsParam,
              workSessionTimeInSeconds: workSessionTimeInSecondsParam,
              numberOfSessionsBeforeLongBreak:
                  numberOfSessionsBeforeLongBreakParam);

          return object;
        }),
    DayStatsEntity: obx_int.EntityDefinition<DayStatsEntity>(
        model: _entities[3],
        toOneRelations: (DayStatsEntity object) => [],
        toManyRelations: (DayStatsEntity object) => {},
        getId: (DayStatsEntity object) => object.id,
        setId: (DayStatsEntity object, int id) {
          object.id = id;
        },
        objectToFB: (DayStatsEntity object, fb.Builder fbb) {
          final shemeNameOffset = fbb.writeString(object.shemeName);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addInt64(2, object.statsDate.millisecondsSinceEpoch);
          fbb.addInt64(5, object.maximumWorkTimeDuringThisInterval);
          fbb.addInt64(6, object.totalWorkTimeForTheEntireInterval);
          fbb.addOffset(7, shemeNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final shemeNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final statsDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final maximumWorkTimeDuringThisIntervalParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final totalWorkTimeForTheEntireIntervalParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final object = DayStatsEntity(
              id: idParam,
              shemeName: shemeNameParam,
              statsDate: statsDateParam,
              maximumWorkTimeDuringThisInterval:
                  maximumWorkTimeDuringThisIntervalParam,
              totalWorkTimeForTheEntireInterval:
                  totalWorkTimeForTheEntireIntervalParam);

          return object;
        }),
    TimerStateEntity: obx_int.EntityDefinition<TimerStateEntity>(
        model: _entities[4],
        toOneRelations: (TimerStateEntity object) => [],
        toManyRelations: (TimerStateEntity object) => {},
        getId: (TimerStateEntity object) => object.id,
        setId: (TimerStateEntity object, int id) {
          object.id = id;
        },
        objectToFB: (TimerStateEntity object, fb.Builder fbb) {
          final currentStateOffset = fbb.writeString(object.currentState);
          final selectedShemeNameOffset =
              fbb.writeString(object.selectedShemeName);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, currentStateOffset);
          fbb.addInt64(2, object.remainingTimeInSeconds);
          fbb.addOffset(3, selectedShemeNameOffset);
          fbb.addBool(4, object.breakStepAutomatically);
          fbb.addBool(5, object.workStepAutomatically);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final currentStateParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final workStepAutomaticallyParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final breakStepAutomaticallyParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final remainingTimeInSecondsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final selectedShemeNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final object = TimerStateEntity(
              id: idParam,
              currentState: currentStateParam,
              workStepAutomatically: workStepAutomaticallyParam,
              breakStepAutomatically: breakStepAutomaticallyParam,
              remainingTimeInSeconds: remainingTimeInSecondsParam,
              selectedShemeName: selectedShemeNameParam);

          return object;
        }),
    SoundControllerStateEntity: obx_int.EntityDefinition<
            SoundControllerStateEntity>(
        model: _entities[5],
        toOneRelations: (SoundControllerStateEntity object) => [],
        toManyRelations: (SoundControllerStateEntity object) => {},
        getId: (SoundControllerStateEntity object) => object.id,
        setId: (SoundControllerStateEntity object, int id) {
          object.id = id;
        },
        objectToFB: (SoundControllerStateEntity object, fb.Builder fbb) {
          final breakSoundOffset = fbb.writeString(object.breakSound);
          final workSoundOffset = fbb.writeString(object.workSound);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, breakSoundOffset);
          fbb.addOffset(2, workSoundOffset);
          fbb.addBool(3, object.playWorkSound);
          fbb.addBool(4, object.playBreakSound);
          fbb.addFloat64(5, object.soundsVolume);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final breakSoundParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final workSoundParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final playWorkSoundParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final playBreakSoundParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final soundsVolumeParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final object = SoundControllerStateEntity(
              id: idParam,
              breakSound: breakSoundParam,
              workSound: workSoundParam,
              playWorkSound: playWorkSoundParam,
              playBreakSound: playBreakSoundParam,
              soundsVolume: soundsVolumeParam);

          return object;
        }),
    WallPaperEntity: obx_int.EntityDefinition<WallPaperEntity>(
        model: _entities[6],
        toOneRelations: (WallPaperEntity object) => [],
        toManyRelations: (WallPaperEntity object) => {},
        getId: (WallPaperEntity object) => object.id,
        setId: (WallPaperEntity object, int id) {
          object.id = id;
        },
        objectToFB: (WallPaperEntity object, fb.Builder fbb) {
          final fullpathToFileOffset = fbb.writeString(object.fullpathToFile);
          final urlToDownloadOffset = fbb.writeString(object.urlToDownload);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, fullpathToFileOffset);
          fbb.addOffset(2, urlToDownloadOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final fullpathToFileParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final urlToDownloadParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final object = WallPaperEntity(
              id: idParam,
              fullpathToFile: fullpathToFileParam,
              urlToDownload: urlToDownloadParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [SoundSettingsEntity] entity fields to define ObjectBox queries.
class SoundSettingsEntity_ {
  /// see [SoundSettingsEntity.id]
  static final id =
      obx.QueryIntegerProperty<SoundSettingsEntity>(_entities[0].properties[0]);

  /// see [SoundSettingsEntity.volumeLevel]
  static final volumeLevel =
      obx.QueryDoubleProperty<SoundSettingsEntity>(_entities[0].properties[1]);

  /// see [SoundSettingsEntity.soundBeforeWork]
  static final soundBeforeWork =
      obx.QueryBooleanProperty<SoundSettingsEntity>(_entities[0].properties[2]);

  /// see [SoundSettingsEntity.soundBeforeWorkName]
  static final soundBeforeWorkName =
      obx.QueryStringProperty<SoundSettingsEntity>(_entities[0].properties[3]);

  /// see [SoundSettingsEntity.soundBeforeShortBreak]
  static final soundBeforeShortBreak =
      obx.QueryBooleanProperty<SoundSettingsEntity>(_entities[0].properties[4]);

  /// see [SoundSettingsEntity.soundBeforeShortBreakName]
  static final soundBeforeShortBreakName =
      obx.QueryStringProperty<SoundSettingsEntity>(_entities[0].properties[5]);

  /// see [SoundSettingsEntity.soundBeforeLongBreak]
  static final soundBeforeLongBreak =
      obx.QueryBooleanProperty<SoundSettingsEntity>(_entities[0].properties[6]);

  /// see [SoundSettingsEntity.soundBeforeLongBreakName]
  static final soundBeforeLongBreakName =
      obx.QueryStringProperty<SoundSettingsEntity>(_entities[0].properties[7]);
}

/// [UserAppSettingsEntity] entity fields to define ObjectBox queries.
class UserAppSettingsEntity_ {
  /// see [UserAppSettingsEntity.id]
  static final id = obx.QueryIntegerProperty<UserAppSettingsEntity>(
      _entities[1].properties[0]);

  /// see [UserAppSettingsEntity.appTheme]
  static final appTheme = obx.QueryStringProperty<UserAppSettingsEntity>(
      _entities[1].properties[1]);

  /// see [UserAppSettingsEntity.appLanguage]
  static final appLanguage = obx.QueryStringProperty<UserAppSettingsEntity>(
      _entities[1].properties[2]);

  /// see [UserAppSettingsEntity.appVersion]
  static final appVersion = obx.QueryStringProperty<UserAppSettingsEntity>(
      _entities[1].properties[3]);

  /// see [UserAppSettingsEntity.selectedVideoWallpapersUrl]
  static final selectedVideoWallpapersUrl =
      obx.QueryStringProperty<UserAppSettingsEntity>(
          _entities[1].properties[4]);

  /// see [UserAppSettingsEntity.notifyOneMinuteBeforeEnd]
  static final notifyOneMinuteBeforeEnd =
      obx.QueryBooleanProperty<UserAppSettingsEntity>(
          _entities[1].properties[5]);

  /// see [UserAppSettingsEntity.playSound]
  static final playSound = obx.QueryBooleanProperty<UserAppSettingsEntity>(
      _entities[1].properties[6]);

  /// see [UserAppSettingsEntity.animatedWallpapers]
  static final animatedWallpapers =
      obx.QueryBooleanProperty<UserAppSettingsEntity>(
          _entities[1].properties[7]);

  /// see [UserAppSettingsEntity.timeFormat24]
  static final timeFormat24 = obx.QueryBooleanProperty<UserAppSettingsEntity>(
      _entities[1].properties[8]);

  /// see [UserAppSettingsEntity.needGuide]
  static final needGuide = obx.QueryBooleanProperty<UserAppSettingsEntity>(
      _entities[1].properties[9]);

  /// see [UserAppSettingsEntity.uploadedWallpapers]
  static final uploadedWallpapers =
      obx.QueryBooleanProperty<UserAppSettingsEntity>(
          _entities[1].properties[10]);
}

/// [PomodoroShemeEntity] entity fields to define ObjectBox queries.
class PomodoroShemeEntity_ {
  /// see [PomodoroShemeEntity.id]
  static final id =
      obx.QueryIntegerProperty<PomodoroShemeEntity>(_entities[2].properties[0]);

  /// see [PomodoroShemeEntity.shemeName]
  static final shemeName =
      obx.QueryStringProperty<PomodoroShemeEntity>(_entities[2].properties[1]);

  /// see [PomodoroShemeEntity.breakTimeInSeconds]
  static final breakTimeInSeconds =
      obx.QueryIntegerProperty<PomodoroShemeEntity>(_entities[2].properties[2]);

  /// see [PomodoroShemeEntity.shortBreakTimeInSeconds]
  static final shortBreakTimeInSeconds =
      obx.QueryIntegerProperty<PomodoroShemeEntity>(_entities[2].properties[3]);

  /// see [PomodoroShemeEntity.workSessionTimeInSeconds]
  static final workSessionTimeInSeconds =
      obx.QueryIntegerProperty<PomodoroShemeEntity>(_entities[2].properties[4]);

  /// see [PomodoroShemeEntity.numberOfSessionsBeforeLongBreak]
  static final numberOfSessionsBeforeLongBreak =
      obx.QueryIntegerProperty<PomodoroShemeEntity>(_entities[2].properties[5]);
}

/// [DayStatsEntity] entity fields to define ObjectBox queries.
class DayStatsEntity_ {
  /// see [DayStatsEntity.id]
  static final id =
      obx.QueryIntegerProperty<DayStatsEntity>(_entities[3].properties[0]);

  /// see [DayStatsEntity.statsDate]
  static final statsDate =
      obx.QueryDateProperty<DayStatsEntity>(_entities[3].properties[1]);

  /// see [DayStatsEntity.maximumWorkTimeDuringThisInterval]
  static final maximumWorkTimeDuringThisInterval =
      obx.QueryIntegerProperty<DayStatsEntity>(_entities[3].properties[2]);

  /// see [DayStatsEntity.totalWorkTimeForTheEntireInterval]
  static final totalWorkTimeForTheEntireInterval =
      obx.QueryIntegerProperty<DayStatsEntity>(_entities[3].properties[3]);

  /// see [DayStatsEntity.shemeName]
  static final shemeName =
      obx.QueryStringProperty<DayStatsEntity>(_entities[3].properties[4]);
}

/// [TimerStateEntity] entity fields to define ObjectBox queries.
class TimerStateEntity_ {
  /// see [TimerStateEntity.id]
  static final id =
      obx.QueryIntegerProperty<TimerStateEntity>(_entities[4].properties[0]);

  /// see [TimerStateEntity.currentState]
  static final currentState =
      obx.QueryStringProperty<TimerStateEntity>(_entities[4].properties[1]);

  /// see [TimerStateEntity.remainingTimeInSeconds]
  static final remainingTimeInSeconds =
      obx.QueryIntegerProperty<TimerStateEntity>(_entities[4].properties[2]);

  /// see [TimerStateEntity.selectedShemeName]
  static final selectedShemeName =
      obx.QueryStringProperty<TimerStateEntity>(_entities[4].properties[3]);

  /// see [TimerStateEntity.breakStepAutomatically]
  static final breakStepAutomatically =
      obx.QueryBooleanProperty<TimerStateEntity>(_entities[4].properties[4]);

  /// see [TimerStateEntity.workStepAutomatically]
  static final workStepAutomatically =
      obx.QueryBooleanProperty<TimerStateEntity>(_entities[4].properties[5]);
}

/// [SoundControllerStateEntity] entity fields to define ObjectBox queries.
class SoundControllerStateEntity_ {
  /// see [SoundControllerStateEntity.id]
  static final id = obx.QueryIntegerProperty<SoundControllerStateEntity>(
      _entities[5].properties[0]);

  /// see [SoundControllerStateEntity.breakSound]
  static final breakSound = obx.QueryStringProperty<SoundControllerStateEntity>(
      _entities[5].properties[1]);

  /// see [SoundControllerStateEntity.workSound]
  static final workSound = obx.QueryStringProperty<SoundControllerStateEntity>(
      _entities[5].properties[2]);

  /// see [SoundControllerStateEntity.playWorkSound]
  static final playWorkSound =
      obx.QueryBooleanProperty<SoundControllerStateEntity>(
          _entities[5].properties[3]);

  /// see [SoundControllerStateEntity.playBreakSound]
  static final playBreakSound =
      obx.QueryBooleanProperty<SoundControllerStateEntity>(
          _entities[5].properties[4]);

  /// see [SoundControllerStateEntity.soundsVolume]
  static final soundsVolume =
      obx.QueryDoubleProperty<SoundControllerStateEntity>(
          _entities[5].properties[5]);
}

/// [WallPaperEntity] entity fields to define ObjectBox queries.
class WallPaperEntity_ {
  /// see [WallPaperEntity.id]
  static final id =
      obx.QueryIntegerProperty<WallPaperEntity>(_entities[6].properties[0]);

  /// see [WallPaperEntity.fullpathToFile]
  static final fullpathToFile =
      obx.QueryStringProperty<WallPaperEntity>(_entities[6].properties[1]);

  /// see [WallPaperEntity.urlToDownload]
  static final urlToDownload =
      obx.QueryStringProperty<WallPaperEntity>(_entities[6].properties[2]);
}
